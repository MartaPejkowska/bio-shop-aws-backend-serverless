service: product-service2
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: eu-west-1
  environment:
    TableName: Products_bio_shop
    StockTableName: Stocks_bio_shop
    SNS_Arn:
      Ref: SNSTopic

  iamRoleStatements:
    - Effect: Allow
      Action:
        "*"
        #- dynamodb:Query
        #- dynamodb:Scan
        #- dynamodb:GetItem
        #- dynamodb:PutItem
      Resource: "*"
    - Effect: Allow
      Action: "sns:*"
      Resource:
        Ref: SNSTopic

plugins:
  - serverless-webpack
  - serverless-offline

custom:
    webpack:
        webpackConfig: ./webpack.config.cjs
        includeModules: true # enable auto-packing of external modules
        forceExclude:
          - aws-sdk

resources:
  Resources:
    SNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: CreateProductTopic
    SNSSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: ${param:email}
        Protocol: email
        TopicArn:
          Ref: SNSTopic

functions:
  getProductsFromDB:
    handler: lambdas/getProductsFromDb.getProductsFromDb
    events:
      - http:
          path: products
          method: get
          cors: true
  getProductsFromDbById:
    handler: lambdas/getProductsFromDbById.getProductsFromDbById
    events:
      - http:
          path: products/{id}
          method: get
          cors: true
  createProduct:
    handler: lambdas/createProduct.createProduct
    events:
      - http:
          path: products
          method: post
          cors: true
  insertProducts:
    handler: lambdas/insertProducts.insertProducts
    events:
      - http:
          path: productss
          method: post
          cors: true
  catalogBatchProcess:
    handler: lambdas/catalogBatchProcess.catalogBatchProcess
    events:
      - sqs:
          arn:  ${param:SQSArn}
          batchSize: 5



